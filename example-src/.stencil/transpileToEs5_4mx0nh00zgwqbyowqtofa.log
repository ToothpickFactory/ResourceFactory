var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
System.register(['./p-ad6259f2.system.js', './p-f62c0fdc.system.js', './p-34e1606b.system.js', './p-511abfdd.system.js'], function (exports) {
    'use strict';
    var registerInstance, h, getElement, ActiveRouter, matchPath, matchesAreEqual;
    return {
        setters: [function (module) {
                registerInstance = module.r;
                h = module.h;
                getElement = module.c;
            }, function (module) {
                ActiveRouter = module.A;
            }, function (module) {
                matchPath = module.m;
                matchesAreEqual = module.a;
            }, function () { }],
        execute: function () {
            /**
              * @name Route
              * @module ionic
              * @description
             */
            var Route = /** @class */ (function () {
                function Route(hostRef) {
                    registerInstance(this, hostRef);
                    this.group = null;
                    this.match = null;
                    this.componentProps = {};
                    this.exact = false;
                    this.scrollOnNextRender = false;
                    this.previousMatch = null;
                }
                // Identify if the current route is a match.
                Route.prototype.computeMatch = function (newLocation) {
                    var isGrouped = this.group != null || (this.el.parentElement != null && this.el.parentElement.tagName.toLowerCase() === 'stencil-route-switch');
                    if (!newLocation || isGrouped) {
                        return;
                    }
                    this.previousMatch = this.match;
                    return this.match = matchPath(newLocation.pathname, {
                        path: this.url,
                        exact: this.exact,
                        strict: true
                    });
                };
                Route.prototype.loadCompleted = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var routeViewOptions;
                        return __generator(this, function (_a) {
                            routeViewOptions = {};
                            if (this.history && this.history.location.hash) {
                                routeViewOptions = {
                                    scrollToId: this.history.location.hash.substr(1)
                                };
                            }
                            else if (this.scrollTopOffset) {
                                routeViewOptions = {
                                    scrollTopOffset: this.scrollTopOffset
                                };
                            }
                            // After all children have completed then tell switch
                            // the provided callback will get executed after this route is in view
                            if (typeof this.componentUpdated === 'function') {
                                this.componentUpdated(routeViewOptions);
                                // If this is an independent route and it matches then routes have updated.
                                // If the only change to location is a hash change then do not scroll.
                            }
                            else if (this.match && !matchesAreEqual(this.match, this.previousMatch) && this.routeViewsUpdated) {
                                this.routeViewsUpdated(routeViewOptions);
                            }
                            return [2 /*return*/];
                        });
                    });
                };
                Route.prototype.componentDidUpdate = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.loadCompleted()];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                Route.prototype.componentDidLoad = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.loadCompleted()];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                Route.prototype.render = function () {
                    // If there is no activeRouter then do not render
                    // Check if this route is in the matching URL (for example, a parent route)
                    if (!this.match || !this.history) {
                        return null;
                    }
                    // component props defined in route
                    // the history api
                    // current match data including params
                    var childProps = Object.assign({}, this.componentProps, { history: this.history, match: this.match });
                    // If there is a routerRender defined then use
                    // that and pass the component and component props with it.
                    if (this.routeRender) {
                        return this.routeRender(Object.assign({}, childProps, { component: this.component }));
                    }
                    if (this.component) {
                        var ChildComponent = this.component;
                        return (h(ChildComponent, Object.assign({}, childProps)));
                    }
                };
                Object.defineProperty(Route.prototype, "el", {
                    get: function () { return getElement(this); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Route, "watchers", {
                    get: function () {
                        return {
                            "location": ["computeMatch"]
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Route, "style", {
                    get: function () { return "STYLE_TEXT_PLACEHOLDER:stencil-route"; },
                    enumerable: true,
                    configurable: true
                });
                return Route;
            }());
            exports('stencil_route', Route);
            ActiveRouter.injectProps(Route, [
                'location',
                'history',
                'historyType',
                'routeViewsUpdated'
            ]);
        }
    };
});
